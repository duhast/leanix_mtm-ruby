=begin
#MTM

#Multi-tenancy-manager for LeanIX. Manages accounts, contracts, users, workspaces, permissions, and more.

The version of the OpenAPI document: 1.6.348

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for LeanixMtmApi::WorkspacesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'WorkspacesApi' do
  before do
    # run before each test
    @api_instance = LeanixMtmApi::WorkspacesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of WorkspacesApi' do
    it 'should create an instance of WorkspacesApi' do
      expect(@api_instance).to be_instance_of(LeanixMtmApi::WorkspacesApi)
    end
  end

  # unit tests for create_workspace
  # createWorkspace
  # Creates a workspace
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [WorkspaceResponse]
  describe 'create_workspace test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_workspace
  # deleteWorkspace
  # Deletes a workspace. Restricted to LeanIX internal use only.
  # @param id Workspace UUID
  # @param [Hash] opts the optional parameters
  # @return [WorkspaceResponse]
  describe 'delete_workspace test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_custom_feature_by_feature_id
  # getCustomFeature
  # Returns the workspace specific custom feature by its featureId e.g. &#39;user.quota&#39;
  # @param id Workspace UUID
  # @param feature_id Feature String id
  # @param [Hash] opts the optional parameters
  # @return [CustomFeatureListResponse]
  describe 'get_custom_feature_by_feature_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_custom_features
  # getCustomFeatures
  # Lists the workspace specific custom features
  # @param id Workspace UUID
  # @param [Hash] opts the optional parameters
  # @return [CustomFeatureListResponse]
  describe 'get_custom_features test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_events
  # getEvents
  # Retrieves all events for a workspace (date must be ISO 8601 formatted)
  # @param id Workspace UUID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :since 
  # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1)
  # @option opts [Integer] :size The page size requested (defaults to 100, max 100)
  # @option opts [String] :sort Comma-separated list of sorting (optional)
  # @option opts [String] :event_type Event type filter (optional)
  # @return [EventListResponse]
  describe 'get_events test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_feature_bundle
  # getFeatureBundle
  # Retrieves a workspace feature bundle (setup settings)
  # @param id Workspace UUID
  # @param [Hash] opts the optional parameters
  # @return [FeatureBundleResponse]
  describe 'get_feature_bundle test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_impersonations
  # getImpersonations
  # Read support user impersonations of the workspace
  # @param id The workspace to create a support user impersonation for.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1)
  # @option opts [Integer] :size The page size requested (defaults to 30, max 100)
  # @option opts [String] :sort Comma-separated list of sorting (optional)
  # @return [ImpersonationListResponse]
  describe 'get_impersonations test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_permission
  # getPermission
  # Retrieves the permission with the given ID of the workspace
  # @param id Workspace UUID
  # @param permission_id ID of the permission to get
  # @param [Hash] opts the optional parameters
  # @return [PermissionResponse]
  describe 'get_permission test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_permission_stats
  # getPermissionStats
  # Returns the total number of users within a workspace for each Permission Status (ACTIVE, ARCHIVED, INVITED...). Additionally, for each Permission Status a list of all Permission Roles (ADMIN, MEMBER...) and user count is provided. In other words, the result is a matrix of user counts with axis PermissionStatus and PermissionRole.
  # @param id Workspace UUID
  # @param [Hash] opts the optional parameters
  # @return [StatsListResponse]
  describe 'get_permission_stats test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_permissions
  # getPermissions
  # Retrieves all permission (users) for the workspace
  # @param id Workspace UUID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :q Query string to search in user (first name, last name, role)
  # @option opts [String] :email Email to search for
  # @option opts [String] :status Optional status to search for
  # @option opts [Boolean] :include_technical_users Include technical users in listing
  # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1)
  # @option opts [Integer] :size The page size requested (defaults to 30, max 100)
  # @option opts [String] :sort Comma-separated list of sorting (optional)
  # @return [PermissionListResponse]
  describe 'get_permissions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_settings
  # getSettings
  # Lists the workspace specific settings
  # @param id Workspace UUID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type Setting type
  # @return [SettingListResponse]
  describe 'get_settings test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_support_user_permissions
  # getSupportPermissions
  # Retrieves all active support users for a workspace
  # @param id Workspace UUID
  # @param [Hash] opts the optional parameters
  # @return [Array<Object>]
  describe 'get_support_user_permissions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_user
  # getUsers
  # Retrieves a specific user with a permission for this workspace
  # @param id Workspace UUID
  # @param user_id User UUID
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1)
  # @option opts [Integer] :size The page size requested (defaults to 30, max 100)
  # @option opts [String] :sort Comma-separated list of sorting (optional)
  # @return [UserListResponse]
  describe 'get_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_user_list_export
  # getUserListExport
  # Creates an EXCEL export of the user list
  # @param id Workspace UUID
  # @param [Hash] opts the optional parameters
  # @return [DownloadKeyResponse]
  describe 'get_user_list_export test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_users
  # getUsers
  # Retrieves all users for the workspace
  # @param id Workspace UUID
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1)
  # @option opts [Integer] :size The page size requested (defaults to 30, max 100)
  # @option opts [String] :sort Comma-separated list of sorting (optional)
  # @return [UserListResponse]
  describe 'get_users test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_workspace
  # getWorkspace
  # Retrieves a workspace
  # @param id Workspace UUID
  # @param [Hash] opts the optional parameters
  # @return [WorkspaceResponse]
  describe 'get_workspace test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_workspaces
  # getWorkspaces
  # List all workspaces for the requesting user
  # @param [Hash] opts the optional parameters
  # @option opts [String] :q Search query
  # @option opts [String] :feature Feature Flag Filter
  # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1)
  # @option opts [Integer] :size The page size requested (defaults to 30, max 100)
  # @option opts [String] :sort Comma-separated list of sorting (optional)
  # @return [WorkspaceListResponse]
  describe 'get_workspaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_workspaces_for_backup
  # @param [Hash] opts the optional parameters
  # @return [Hash<String, Array<String>>]
  describe 'get_workspaces_for_backup test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_workspace
  # updateWorkspace
  # Updates a workspace
  # @param id Workspace UUID
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [WorkspaceResponse]
  describe 'update_workspace test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
