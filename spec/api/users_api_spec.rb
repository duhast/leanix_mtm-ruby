=begin
#MTM

#Multi-tenancy-manager for LeanIX. Manages accounts, contracts, users, workspaces, permissions, and more.

The version of the OpenAPI document: 1.6.348

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for LeanixMtmApi::UsersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'UsersApi' do
  before do
    # run before each test
    @api_instance = LeanixMtmApi::UsersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UsersApi' do
    it 'should create an instance of UsersApi' do
      expect(@api_instance).to be_instance_of(LeanixMtmApi::UsersApi)
    end
  end

  # unit tests for create_or_update
  # createOrUpdateUserSegment
  # Create or update the segment of a user
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [UserSegmentDTO]
  describe 'create_or_update test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_user
  # createUser
  # Create a user
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [UserResponse]
  describe 'create_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_user_password
  # createUserPassword
  # Create a password for a user. Restricted to LeanIX internal use only.
  # @param id User UUID
  # @param [Hash] opts the optional parameters
  # @return [UserResponse]
  describe 'create_user_password test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get
  # getUserSegment
  # Get the segment of a user
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [UserSegmentDTO]
  describe 'get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_events
  # getEvents
  # Retrieves all events for an user (date must be ISO 8601 formatted)
  # @param id User UUID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :since 
  # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1)
  # @option opts [Integer] :size The page size requested (defaults to 100, max 100)
  # @option opts [String] :sort Comma-separated list of sorting (optional)
  # @return [EventListResponse]
  describe 'get_events test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_permissions
  # getPermissions
  # Endpoint to list the user permissions.
  # @param id User UUID
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_potential_permissions Include potential permissions, i.e. permissions that do not exist yet but would be created on first login attempt. (optional)
  # @option opts [Boolean] :valid_only Show only active permissions. (optional)
  # @option opts [String] :q Query string to search in workspace and role
  # @option opts [String] :sort Comma-separated list of sorting (optional)
  # @return [PermissionListResponse]
  describe 'get_permissions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_settings
  # getSettings
  # Endpoint to list the user specific settings.
  # @param id User UUID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type Setting type
  # @return [SettingListResponse]
  describe 'get_settings test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_user
  # getUser
  # Returns user data.
  # @param id User UUID
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :return_single_permission If true returns only the permission for the workspace of the auth user
  # @return [UserResponse]
  describe 'get_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_user_random
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :max_results 
  # @return [Array<Hash<String, Object>>]
  describe 'get_user_random test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_users
  # User
  # List or search all users.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :email Search by email address (optional)
  # @option opts [String] :q Search in user name or name (optional)
  # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1)
  # @option opts [Integer] :size The page size requested (defaults to 30, max 100)
  # @option opts [String] :sort Comma-separated list of sorting (optional)
  # @return [UserListResponse]
  describe 'get_users test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for set_password
  # Reset Password
  # Endpoint to finish the reset the password process, can only be accessed by systems.
  # @param id User UUID
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [UserResponse]
  describe 'set_password test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_user
  # updateUser
  # Update a user
  # @param id User UUID
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :no_additional_permissions If true returns only the permissions already provided
  # @return [UserResponse]
  describe 'update_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
