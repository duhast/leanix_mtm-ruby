=begin
#MTM

#Multi-tenancy-manager for LeanIX. Manages accounts, contracts, users, workspaces, permissions, and more.

The version of the OpenAPI document: 1.6.348

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module LeanixMtmApi
  class User
    attr_accessor :id

    attr_accessor :account

    attr_accessor :user_name

    attr_accessor :technical_user_name

    attr_accessor :email

    attr_accessor :technical_user_email

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :department

    attr_accessor :last_login

    attr_accessor :current_login

    attr_accessor :api_key

    attr_accessor :feed_key

    attr_accessor :role

    attr_accessor :status

    attr_accessor :crm_tags

    attr_accessor :crm_link

    attr_accessor :number_of_failed_login_attempts

    attr_accessor :technical_user

    attr_accessor :scim_managed

    attr_accessor :transient_user

    attr_accessor :links

    attr_accessor :permissions

    attr_accessor :replayed

    attr_accessor :active

    attr_accessor :display_name

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'account' => :'account',
        :'user_name' => :'userName',
        :'technical_user_name' => :'technicalUserName',
        :'email' => :'email',
        :'technical_user_email' => :'technicalUserEmail',
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'department' => :'department',
        :'last_login' => :'lastLogin',
        :'current_login' => :'currentLogin',
        :'api_key' => :'apiKey',
        :'feed_key' => :'feedKey',
        :'role' => :'role',
        :'status' => :'status',
        :'crm_tags' => :'crmTags',
        :'crm_link' => :'crmLink',
        :'number_of_failed_login_attempts' => :'numberOfFailedLoginAttempts',
        :'technical_user' => :'technicalUser',
        :'scim_managed' => :'scimManaged',
        :'transient_user' => :'transientUser',
        :'links' => :'links',
        :'permissions' => :'permissions',
        :'replayed' => :'replayed',
        :'active' => :'active',
        :'display_name' => :'displayName'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'account' => :'Account',
        :'user_name' => :'String',
        :'technical_user_name' => :'String',
        :'email' => :'String',
        :'technical_user_email' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'department' => :'String',
        :'last_login' => :'Time',
        :'current_login' => :'Time',
        :'api_key' => :'String',
        :'feed_key' => :'String',
        :'role' => :'String',
        :'status' => :'String',
        :'crm_tags' => :'String',
        :'crm_link' => :'String',
        :'number_of_failed_login_attempts' => :'Integer',
        :'technical_user' => :'Boolean',
        :'scim_managed' => :'Boolean',
        :'transient_user' => :'Boolean',
        :'links' => :'Array<Link>',
        :'permissions' => :'Array<Permission>',
        :'replayed' => :'Boolean',
        :'active' => :'Boolean',
        :'display_name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LeanixMtmApi::User` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LeanixMtmApi::User`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'account')
        self.account = attributes[:'account']
      else
        self.account = nil
      end

      if attributes.key?(:'user_name')
        self.user_name = attributes[:'user_name']
      end

      if attributes.key?(:'technical_user_name')
        self.technical_user_name = attributes[:'technical_user_name']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'technical_user_email')
        self.technical_user_email = attributes[:'technical_user_email']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'department')
        self.department = attributes[:'department']
      end

      if attributes.key?(:'last_login')
        self.last_login = attributes[:'last_login']
      end

      if attributes.key?(:'current_login')
        self.current_login = attributes[:'current_login']
      end

      if attributes.key?(:'api_key')
        self.api_key = attributes[:'api_key']
      end

      if attributes.key?(:'feed_key')
        self.feed_key = attributes[:'feed_key']
      end

      if attributes.key?(:'role')
        self.role = attributes[:'role']
      else
        self.role = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'crm_tags')
        self.crm_tags = attributes[:'crm_tags']
      end

      if attributes.key?(:'crm_link')
        self.crm_link = attributes[:'crm_link']
      end

      if attributes.key?(:'number_of_failed_login_attempts')
        self.number_of_failed_login_attempts = attributes[:'number_of_failed_login_attempts']
      end

      if attributes.key?(:'technical_user')
        self.technical_user = attributes[:'technical_user']
      end

      if attributes.key?(:'scim_managed')
        self.scim_managed = attributes[:'scim_managed']
      end

      if attributes.key?(:'transient_user')
        self.transient_user = attributes[:'transient_user']
      end

      if attributes.key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.key?(:'permissions')
        if (value = attributes[:'permissions']).is_a?(Array)
          self.permissions = value
        end
      end

      if attributes.key?(:'replayed')
        self.replayed = attributes[:'replayed']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @account.nil?
        invalid_properties.push('invalid value for "account", account cannot be nil.')
      end

      if !@user_name.nil? && @user_name.to_s.length > 256
        invalid_properties.push('invalid value for "user_name", the character length must be smaller than or equal to 256.')
      end

      if !@user_name.nil? && @user_name.to_s.length < 6
        invalid_properties.push('invalid value for "user_name", the character length must be great than or equal to 6.')
      end

      if !@technical_user_name.nil? && @technical_user_name.to_s.length > 256
        invalid_properties.push('invalid value for "technical_user_name", the character length must be smaller than or equal to 256.')
      end

      if !@technical_user_name.nil? && @technical_user_name.to_s.length < 1
        invalid_properties.push('invalid value for "technical_user_name", the character length must be great than or equal to 1.')
      end

      if !@email.nil? && @email.to_s.length > 256
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 256.')
      end

      if !@email.nil? && @email.to_s.length < 2
        invalid_properties.push('invalid value for "email", the character length must be great than or equal to 2.')
      end

      if !@technical_user_email.nil? && @technical_user_email.to_s.length > 256
        invalid_properties.push('invalid value for "technical_user_email", the character length must be smaller than or equal to 256.')
      end

      if !@technical_user_email.nil? && @technical_user_email.to_s.length < 0
        invalid_properties.push('invalid value for "technical_user_email", the character length must be great than or equal to 0.')
      end

      if !@first_name.nil? && @first_name.to_s.length > 128
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 128.')
      end

      if !@first_name.nil? && @first_name.to_s.length < 1
        invalid_properties.push('invalid value for "first_name", the character length must be great than or equal to 1.')
      end

      if !@last_name.nil? && @last_name.to_s.length > 128
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 128.')
      end

      if !@last_name.nil? && @last_name.to_s.length < 1
        invalid_properties.push('invalid value for "last_name", the character length must be great than or equal to 1.')
      end

      if !@api_key.nil? && @api_key.to_s.length > 255
        invalid_properties.push('invalid value for "api_key", the character length must be smaller than or equal to 255.')
      end

      if !@api_key.nil? && @api_key.to_s.length < 0
        invalid_properties.push('invalid value for "api_key", the character length must be great than or equal to 0.')
      end

      if !@feed_key.nil? && @feed_key.to_s.length > 255
        invalid_properties.push('invalid value for "feed_key", the character length must be smaller than or equal to 255.')
      end

      if !@feed_key.nil? && @feed_key.to_s.length < 16
        invalid_properties.push('invalid value for "feed_key", the character length must be great than or equal to 16.')
      end

      if @role.nil?
        invalid_properties.push('invalid value for "role", role cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @account.nil?
      return false if !@user_name.nil? && @user_name.to_s.length > 256
      return false if !@user_name.nil? && @user_name.to_s.length < 6
      return false if !@technical_user_name.nil? && @technical_user_name.to_s.length > 256
      return false if !@technical_user_name.nil? && @technical_user_name.to_s.length < 1
      return false if !@email.nil? && @email.to_s.length > 256
      return false if !@email.nil? && @email.to_s.length < 2
      return false if !@technical_user_email.nil? && @technical_user_email.to_s.length > 256
      return false if !@technical_user_email.nil? && @technical_user_email.to_s.length < 0
      return false if !@first_name.nil? && @first_name.to_s.length > 128
      return false if !@first_name.nil? && @first_name.to_s.length < 1
      return false if !@last_name.nil? && @last_name.to_s.length > 128
      return false if !@last_name.nil? && @last_name.to_s.length < 1
      return false if !@api_key.nil? && @api_key.to_s.length > 255
      return false if !@api_key.nil? && @api_key.to_s.length < 0
      return false if !@feed_key.nil? && @feed_key.to_s.length > 255
      return false if !@feed_key.nil? && @feed_key.to_s.length < 16
      return false if @role.nil?
      role_validator = EnumAttributeValidator.new('String', ["SUPERADMIN", "SYSTEM", "APICLIENT", "ACCOUNTADMIN", "ACCOUNTUSER"])
      return false unless role_validator.valid?(@role)
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["ACTIVE", "ARCHIVED"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] user_name Value to be assigned
    def user_name=(user_name)
      if user_name.nil?
        fail ArgumentError, 'user_name cannot be nil'
      end

      if user_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "user_name", the character length must be smaller than or equal to 256.'
      end

      if user_name.to_s.length < 6
        fail ArgumentError, 'invalid value for "user_name", the character length must be great than or equal to 6.'
      end

      @user_name = user_name
    end

    # Custom attribute writer method with validation
    # @param [Object] technical_user_name Value to be assigned
    def technical_user_name=(technical_user_name)
      if technical_user_name.nil?
        fail ArgumentError, 'technical_user_name cannot be nil'
      end

      if technical_user_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "technical_user_name", the character length must be smaller than or equal to 256.'
      end

      if technical_user_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "technical_user_name", the character length must be great than or equal to 1.'
      end

      @technical_user_name = technical_user_name
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if email.nil?
        fail ArgumentError, 'email cannot be nil'
      end

      if email.to_s.length > 256
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 256.'
      end

      if email.to_s.length < 2
        fail ArgumentError, 'invalid value for "email", the character length must be great than or equal to 2.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] technical_user_email Value to be assigned
    def technical_user_email=(technical_user_email)
      if technical_user_email.nil?
        fail ArgumentError, 'technical_user_email cannot be nil'
      end

      if technical_user_email.to_s.length > 256
        fail ArgumentError, 'invalid value for "technical_user_email", the character length must be smaller than or equal to 256.'
      end

      if technical_user_email.to_s.length < 0
        fail ArgumentError, 'invalid value for "technical_user_email", the character length must be great than or equal to 0.'
      end

      @technical_user_email = technical_user_email
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if first_name.nil?
        fail ArgumentError, 'first_name cannot be nil'
      end

      if first_name.to_s.length > 128
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 128.'
      end

      if first_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "first_name", the character length must be great than or equal to 1.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if last_name.nil?
        fail ArgumentError, 'last_name cannot be nil'
      end

      if last_name.to_s.length > 128
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 128.'
      end

      if last_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "last_name", the character length must be great than or equal to 1.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] api_key Value to be assigned
    def api_key=(api_key)
      if api_key.nil?
        fail ArgumentError, 'api_key cannot be nil'
      end

      if api_key.to_s.length > 255
        fail ArgumentError, 'invalid value for "api_key", the character length must be smaller than or equal to 255.'
      end

      if api_key.to_s.length < 0
        fail ArgumentError, 'invalid value for "api_key", the character length must be great than or equal to 0.'
      end

      @api_key = api_key
    end

    # Custom attribute writer method with validation
    # @param [Object] feed_key Value to be assigned
    def feed_key=(feed_key)
      if feed_key.nil?
        fail ArgumentError, 'feed_key cannot be nil'
      end

      if feed_key.to_s.length > 255
        fail ArgumentError, 'invalid value for "feed_key", the character length must be smaller than or equal to 255.'
      end

      if feed_key.to_s.length < 16
        fail ArgumentError, 'invalid value for "feed_key", the character length must be great than or equal to 16.'
      end

      @feed_key = feed_key
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] role Object to be assigned
    def role=(role)
      validator = EnumAttributeValidator.new('String', ["SUPERADMIN", "SYSTEM", "APICLIENT", "ACCOUNTADMIN", "ACCOUNTUSER"])
      unless validator.valid?(role)
        fail ArgumentError, "invalid value for \"role\", must be one of #{validator.allowable_values}."
      end
      @role = role
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["ACTIVE", "ARCHIVED"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          account == o.account &&
          user_name == o.user_name &&
          technical_user_name == o.technical_user_name &&
          email == o.email &&
          technical_user_email == o.technical_user_email &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          department == o.department &&
          last_login == o.last_login &&
          current_login == o.current_login &&
          api_key == o.api_key &&
          feed_key == o.feed_key &&
          role == o.role &&
          status == o.status &&
          crm_tags == o.crm_tags &&
          crm_link == o.crm_link &&
          number_of_failed_login_attempts == o.number_of_failed_login_attempts &&
          technical_user == o.technical_user &&
          scim_managed == o.scim_managed &&
          transient_user == o.transient_user &&
          links == o.links &&
          permissions == o.permissions &&
          replayed == o.replayed &&
          active == o.active &&
          display_name == o.display_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, account, user_name, technical_user_name, email, technical_user_email, first_name, last_name, department, last_login, current_login, api_key, feed_key, role, status, crm_tags, crm_link, number_of_failed_login_attempts, technical_user, scim_managed, transient_user, links, permissions, replayed, active, display_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LeanixMtmApi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
