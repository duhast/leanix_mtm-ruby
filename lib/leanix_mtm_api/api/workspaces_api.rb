=begin
#MTM

#Multi-tenancy-manager for LeanIX. Manages accounts, contracts, users, workspaces, permissions, and more.

The version of the OpenAPI document: 1.6.348

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module LeanixMtmApi
  class WorkspacesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # createWorkspace
    # Creates a workspace
    # @param body [Workspace] 
    # @param [Hash] opts the optional parameters
    # @return [WorkspaceResponse]
    def create_workspace(body, opts = {})
      data, _status_code, _headers = create_workspace_with_http_info(body, opts)
      data
    end

    # createWorkspace
    # Creates a workspace
    # @param body [Workspace] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkspaceResponse, Integer, Hash)>] WorkspaceResponse data, response status code and response headers
    def create_workspace_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.create_workspace ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling WorkspacesApi.create_workspace"
      end
      # resource path
      local_var_path = '/workspaces'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'WorkspaceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.create_workspace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#create_workspace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteWorkspace
    # Deletes a workspace. Restricted to LeanIX internal use only.
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @return [WorkspaceResponse]
    def delete_workspace(id, opts = {})
      data, _status_code, _headers = delete_workspace_with_http_info(id, opts)
      data
    end

    # deleteWorkspace
    # Deletes a workspace. Restricted to LeanIX internal use only.
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkspaceResponse, Integer, Hash)>] WorkspaceResponse data, response status code and response headers
    def delete_workspace_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.delete_workspace ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkspacesApi.delete_workspace"
      end
      # resource path
      local_var_path = '/workspaces/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkspaceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.delete_workspace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#delete_workspace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCustomFeature
    # Returns the workspace specific custom feature by its featureId e.g. 'user.quota'
    # @param id [String] Workspace UUID
    # @param feature_id [String] Feature String id
    # @param [Hash] opts the optional parameters
    # @return [CustomFeatureListResponse]
    def get_custom_feature_by_feature_id(id, feature_id, opts = {})
      data, _status_code, _headers = get_custom_feature_by_feature_id_with_http_info(id, feature_id, opts)
      data
    end

    # getCustomFeature
    # Returns the workspace specific custom feature by its featureId e.g. &#39;user.quota&#39;
    # @param id [String] Workspace UUID
    # @param feature_id [String] Feature String id
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomFeatureListResponse, Integer, Hash)>] CustomFeatureListResponse data, response status code and response headers
    def get_custom_feature_by_feature_id_with_http_info(id, feature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.get_custom_feature_by_feature_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkspacesApi.get_custom_feature_by_feature_id"
      end
      # verify the required parameter 'feature_id' is set
      if @api_client.config.client_side_validation && feature_id.nil?
        fail ArgumentError, "Missing the required parameter 'feature_id' when calling WorkspacesApi.get_custom_feature_by_feature_id"
      end
      # resource path
      local_var_path = '/workspaces/{id}/customFeatures/{featureId}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'featureId' + '}', CGI.escape(feature_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomFeatureListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.get_custom_feature_by_feature_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#get_custom_feature_by_feature_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCustomFeatures
    # Lists the workspace specific custom features
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @return [CustomFeatureListResponse]
    def get_custom_features(id, opts = {})
      data, _status_code, _headers = get_custom_features_with_http_info(id, opts)
      data
    end

    # getCustomFeatures
    # Lists the workspace specific custom features
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomFeatureListResponse, Integer, Hash)>] CustomFeatureListResponse data, response status code and response headers
    def get_custom_features_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.get_custom_features ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkspacesApi.get_custom_features"
      end
      # resource path
      local_var_path = '/workspaces/{id}/customFeatures'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomFeatureListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.get_custom_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#get_custom_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getEvents
    # Retrieves all events for a workspace (date must be ISO 8601 formatted)
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :since 
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 100, max 100) (default to 100)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @option opts [String] :event_type Event type filter (optional)
    # @return [EventListResponse]
    def get_events(id, opts = {})
      data, _status_code, _headers = get_events_with_http_info(id, opts)
      data
    end

    # getEvents
    # Retrieves all events for a workspace (date must be ISO 8601 formatted)
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :since 
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 100, max 100) (default to 100)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @option opts [String] :event_type Event type filter (optional)
    # @return [Array<(EventListResponse, Integer, Hash)>] EventListResponse data, response status code and response headers
    def get_events_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.get_events ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkspacesApi.get_events"
      end
      # resource path
      local_var_path = '/workspaces/{id}/events'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'eventType'] = opts[:'event_type'] if !opts[:'event_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EventListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.get_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#get_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getFeatureBundle
    # Retrieves a workspace feature bundle (setup settings)
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @return [FeatureBundleResponse]
    def get_feature_bundle(id, opts = {})
      data, _status_code, _headers = get_feature_bundle_with_http_info(id, opts)
      data
    end

    # getFeatureBundle
    # Retrieves a workspace feature bundle (setup settings)
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeatureBundleResponse, Integer, Hash)>] FeatureBundleResponse data, response status code and response headers
    def get_feature_bundle_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.get_feature_bundle ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkspacesApi.get_feature_bundle"
      end
      # resource path
      local_var_path = '/workspaces/{id}/featureBundle'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeatureBundleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.get_feature_bundle",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#get_feature_bundle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getImpersonations
    # Read support user impersonations of the workspace
    # @param id [String] The workspace to create a support user impersonation for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [ImpersonationListResponse]
    def get_impersonations(id, opts = {})
      data, _status_code, _headers = get_impersonations_with_http_info(id, opts)
      data
    end

    # getImpersonations
    # Read support user impersonations of the workspace
    # @param id [String] The workspace to create a support user impersonation for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [Array<(ImpersonationListResponse, Integer, Hash)>] ImpersonationListResponse data, response status code and response headers
    def get_impersonations_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.get_impersonations ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkspacesApi.get_impersonations"
      end
      # resource path
      local_var_path = '/workspaces/{id}/impersonations'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImpersonationListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.get_impersonations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#get_impersonations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getPermission
    # Retrieves the permission with the given ID of the workspace
    # @param id [String] Workspace UUID
    # @param permission_id [String] ID of the permission to get
    # @param [Hash] opts the optional parameters
    # @return [PermissionResponse]
    def get_permission(id, permission_id, opts = {})
      data, _status_code, _headers = get_permission_with_http_info(id, permission_id, opts)
      data
    end

    # getPermission
    # Retrieves the permission with the given ID of the workspace
    # @param id [String] Workspace UUID
    # @param permission_id [String] ID of the permission to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(PermissionResponse, Integer, Hash)>] PermissionResponse data, response status code and response headers
    def get_permission_with_http_info(id, permission_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.get_permission ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkspacesApi.get_permission"
      end
      # verify the required parameter 'permission_id' is set
      if @api_client.config.client_side_validation && permission_id.nil?
        fail ArgumentError, "Missing the required parameter 'permission_id' when calling WorkspacesApi.get_permission"
      end
      # resource path
      local_var_path = '/workspaces/{id}/permissions/{permissionId}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'permissionId' + '}', CGI.escape(permission_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PermissionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.get_permission",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#get_permission\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getPermissionStats
    # Returns the total number of users within a workspace for each Permission Status (ACTIVE, ARCHIVED, INVITED...). Additionally, for each Permission Status a list of all Permission Roles (ADMIN, MEMBER...) and user count is provided. In other words, the result is a matrix of user counts with axis PermissionStatus and PermissionRole.
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @return [StatsListResponse]
    def get_permission_stats(id, opts = {})
      data, _status_code, _headers = get_permission_stats_with_http_info(id, opts)
      data
    end

    # getPermissionStats
    # Returns the total number of users within a workspace for each Permission Status (ACTIVE, ARCHIVED, INVITED...). Additionally, for each Permission Status a list of all Permission Roles (ADMIN, MEMBER...) and user count is provided. In other words, the result is a matrix of user counts with axis PermissionStatus and PermissionRole.
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(StatsListResponse, Integer, Hash)>] StatsListResponse data, response status code and response headers
    def get_permission_stats_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.get_permission_stats ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkspacesApi.get_permission_stats"
      end
      # resource path
      local_var_path = '/workspaces/{id}/permissions/stats'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StatsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.get_permission_stats",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#get_permission_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getPermissions
    # Retrieves all permission (users) for the workspace
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q Query string to search in user (first name, last name, role)
    # @option opts [String] :email Email to search for
    # @option opts [String] :status Optional status to search for
    # @option opts [Boolean] :include_technical_users Include technical users in listing
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [PermissionListResponse]
    def get_permissions(id, opts = {})
      data, _status_code, _headers = get_permissions_with_http_info(id, opts)
      data
    end

    # getPermissions
    # Retrieves all permission (users) for the workspace
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q Query string to search in user (first name, last name, role)
    # @option opts [String] :email Email to search for
    # @option opts [String] :status Optional status to search for
    # @option opts [Boolean] :include_technical_users Include technical users in listing
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [Array<(PermissionListResponse, Integer, Hash)>] PermissionListResponse data, response status code and response headers
    def get_permissions_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.get_permissions ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkspacesApi.get_permissions"
      end
      # resource path
      local_var_path = '/workspaces/{id}/permissions'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'includeTechnicalUsers'] = opts[:'include_technical_users'] if !opts[:'include_technical_users'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PermissionListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.get_permissions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#get_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getSettings
    # Lists the workspace specific settings
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Setting type
    # @return [SettingListResponse]
    def get_settings(id, opts = {})
      data, _status_code, _headers = get_settings_with_http_info(id, opts)
      data
    end

    # getSettings
    # Lists the workspace specific settings
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Setting type
    # @return [Array<(SettingListResponse, Integer, Hash)>] SettingListResponse data, response status code and response headers
    def get_settings_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.get_settings ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkspacesApi.get_settings"
      end
      allowable_values = ["CONFIG", "SETUP"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/workspaces/{id}/settings'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SettingListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.get_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#get_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getSupportPermissions
    # Retrieves all active support users for a workspace
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def get_support_user_permissions(id, opts = {})
      data, _status_code, _headers = get_support_user_permissions_with_http_info(id, opts)
      data
    end

    # getSupportPermissions
    # Retrieves all active support users for a workspace
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Integer, Hash)>] Array<Object> data, response status code and response headers
    def get_support_user_permissions_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.get_support_user_permissions ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkspacesApi.get_support_user_permissions"
      end
      # resource path
      local_var_path = '/workspaces/{id}/listSupportUsers'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.get_support_user_permissions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#get_support_user_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getUsers
    # Retrieves a specific user with a permission for this workspace
    # @param id [String] Workspace UUID
    # @param user_id [String] User UUID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [UserListResponse]
    def get_user(id, user_id, opts = {})
      data, _status_code, _headers = get_user_with_http_info(id, user_id, opts)
      data
    end

    # getUsers
    # Retrieves a specific user with a permission for this workspace
    # @param id [String] Workspace UUID
    # @param user_id [String] User UUID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [Array<(UserListResponse, Integer, Hash)>] UserListResponse data, response status code and response headers
    def get_user_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.get_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkspacesApi.get_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling WorkspacesApi.get_user"
      end
      # resource path
      local_var_path = '/workspaces/{id}/users/{userId}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.get_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getUserListExport
    # Creates an EXCEL export of the user list
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @return [DownloadKeyResponse]
    def get_user_list_export(id, opts = {})
      data, _status_code, _headers = get_user_list_export_with_http_info(id, opts)
      data
    end

    # getUserListExport
    # Creates an EXCEL export of the user list
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DownloadKeyResponse, Integer, Hash)>] DownloadKeyResponse data, response status code and response headers
    def get_user_list_export_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.get_user_list_export ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkspacesApi.get_user_list_export"
      end
      # resource path
      local_var_path = '/workspaces/{id}/permissions/export'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DownloadKeyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.get_user_list_export",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#get_user_list_export\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getUsers
    # Retrieves all users for the workspace
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [UserListResponse]
    def get_users(id, opts = {})
      data, _status_code, _headers = get_users_with_http_info(id, opts)
      data
    end

    # getUsers
    # Retrieves all users for the workspace
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [Array<(UserListResponse, Integer, Hash)>] UserListResponse data, response status code and response headers
    def get_users_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.get_users ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkspacesApi.get_users"
      end
      # resource path
      local_var_path = '/workspaces/{id}/users'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.get_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getWorkspace
    # Retrieves a workspace
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @return [WorkspaceResponse]
    def get_workspace(id, opts = {})
      data, _status_code, _headers = get_workspace_with_http_info(id, opts)
      data
    end

    # getWorkspace
    # Retrieves a workspace
    # @param id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkspaceResponse, Integer, Hash)>] WorkspaceResponse data, response status code and response headers
    def get_workspace_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.get_workspace ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkspacesApi.get_workspace"
      end
      # resource path
      local_var_path = '/workspaces/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkspaceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.get_workspace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#get_workspace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getWorkspaces
    # List all workspaces for the requesting user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q Search query
    # @option opts [String] :feature Feature Flag Filter
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional) (default to 'id-asc')
    # @return [WorkspaceListResponse]
    def get_workspaces(opts = {})
      data, _status_code, _headers = get_workspaces_with_http_info(opts)
      data
    end

    # getWorkspaces
    # List all workspaces for the requesting user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q Search query
    # @option opts [String] :feature Feature Flag Filter
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional) (default to 'id-asc')
    # @return [Array<(WorkspaceListResponse, Integer, Hash)>] WorkspaceListResponse data, response status code and response headers
    def get_workspaces_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.get_workspaces ...'
      end
      # resource path
      local_var_path = '/workspaces'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkspaceListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.get_workspaces",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#get_workspaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Array<String>>]
    def get_workspaces_for_backup(opts = {})
      data, _status_code, _headers = get_workspaces_for_backup_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Array<String>>, Integer, Hash)>] Hash<String, Array<String>> data, response status code and response headers
    def get_workspaces_for_backup_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.get_workspaces_for_backup ...'
      end
      # resource path
      local_var_path = '/workspaces/backupWorkspaces'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Array<String>>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.get_workspaces_for_backup",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#get_workspaces_for_backup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateWorkspace
    # Updates a workspace
    # @param id [String] Workspace UUID
    # @param body [Workspace] 
    # @param [Hash] opts the optional parameters
    # @return [WorkspaceResponse]
    def update_workspace(id, body, opts = {})
      data, _status_code, _headers = update_workspace_with_http_info(id, body, opts)
      data
    end

    # updateWorkspace
    # Updates a workspace
    # @param id [String] Workspace UUID
    # @param body [Workspace] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkspaceResponse, Integer, Hash)>] WorkspaceResponse data, response status code and response headers
    def update_workspace_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspacesApi.update_workspace ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WorkspacesApi.update_workspace"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling WorkspacesApi.update_workspace"
      end
      # resource path
      local_var_path = '/workspaces/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'WorkspaceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"WorkspacesApi.update_workspace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspacesApi#update_workspace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
