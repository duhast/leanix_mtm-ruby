=begin
#MTM

#Multi-tenancy-manager for LeanIX. Manages accounts, contracts, users, workspaces, permissions, and more.

The version of the OpenAPI document: 1.6.348

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module LeanixMtmApi
  class IdentityProvidersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # createIdentityProvider
    # Creates an identity provider. Restricted to LeanIX internal use only.
    # @param body [IdentityProvider] 
    # @param [Hash] opts the optional parameters
    # @return [IdentityProviderResponse]
    def create_identity_provider(body, opts = {})
      data, _status_code, _headers = create_identity_provider_with_http_info(body, opts)
      data
    end

    # createIdentityProvider
    # Creates an identity provider. Restricted to LeanIX internal use only.
    # @param body [IdentityProvider] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityProviderResponse, Integer, Hash)>] IdentityProviderResponse data, response status code and response headers
    def create_identity_provider_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.create_identity_provider ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IdentityProvidersApi.create_identity_provider"
      end
      # resource path
      local_var_path = '/identityProviders'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'IdentityProviderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"IdentityProvidersApi.create_identity_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#create_identity_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteIdentityProvider
    # Deletes an identity provider. Restricted to LeanIX internal use only.
    # @param id [String] Identity provider UUID
    # @param [Hash] opts the optional parameters
    # @return [IdentityProviderResponse]
    def delete_identity_provider(id, opts = {})
      data, _status_code, _headers = delete_identity_provider_with_http_info(id, opts)
      data
    end

    # deleteIdentityProvider
    # Deletes an identity provider. Restricted to LeanIX internal use only.
    # @param id [String] Identity provider UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityProviderResponse, Integer, Hash)>] IdentityProviderResponse data, response status code and response headers
    def delete_identity_provider_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.delete_identity_provider ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IdentityProvidersApi.delete_identity_provider"
      end
      # resource path
      local_var_path = '/identityProviders/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IdentityProviderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"IdentityProvidersApi.delete_identity_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#delete_identity_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getDomains
    # Retrieves all domains for an identity provider. Restricted to LeanIX internal use only.
    # @param id [String] Identity provider UUID
    # @param [Hash] opts the optional parameters
    # @return [DomainListResponse]
    def get_domains(id, opts = {})
      data, _status_code, _headers = get_domains_with_http_info(id, opts)
      data
    end

    # getDomains
    # Retrieves all domains for an identity provider. Restricted to LeanIX internal use only.
    # @param id [String] Identity provider UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainListResponse, Integer, Hash)>] DomainListResponse data, response status code and response headers
    def get_domains_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.get_domains ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IdentityProvidersApi.get_domains"
      end
      # resource path
      local_var_path = '/identityProviders/{id}/domains'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"IdentityProvidersApi.get_domains",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#get_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getEvents
    # Retrieves all events for an identity provider (send date as 2013-10-05T00%3A21%3A54.000%2B07%3A00). Restricted to LeanIX internal use only.
    # @param id [String] Identity Provider UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :since ISO 8601 date
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 100, max 100) (default to 100)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [EventListResponse]
    def get_events(id, opts = {})
      data, _status_code, _headers = get_events_with_http_info(id, opts)
      data
    end

    # getEvents
    # Retrieves all events for an identity provider (send date as 2013-10-05T00%3A21%3A54.000%2B07%3A00). Restricted to LeanIX internal use only.
    # @param id [String] Identity Provider UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :since ISO 8601 date
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 100, max 100) (default to 100)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [Array<(EventListResponse, Integer, Hash)>] EventListResponse data, response status code and response headers
    def get_events_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.get_events ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IdentityProvidersApi.get_events"
      end
      # resource path
      local_var_path = '/identityProviders/{id}/events'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EventListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"IdentityProvidersApi.get_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#get_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getIdentityProvider
    # Retrieves a specific entity provider. Restricted to LeanIX internal use only.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [IdentityProviderResponse]
    def get_identity_provider(id, opts = {})
      data, _status_code, _headers = get_identity_provider_with_http_info(id, opts)
      data
    end

    # getIdentityProvider
    # Retrieves a specific entity provider. Restricted to LeanIX internal use only.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityProviderResponse, Integer, Hash)>] IdentityProviderResponse data, response status code and response headers
    def get_identity_provider_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.get_identity_provider ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IdentityProvidersApi.get_identity_provider"
      end
      # resource path
      local_var_path = '/identityProviders/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IdentityProviderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"IdentityProvidersApi.get_identity_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#get_identity_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getIdentityProviders
    # Retrieves all identity providers. Restricted to LeanIX internal use only.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q A part of the name or EntityID to search for
    # @option opts [String] :entity_id EntityID of the IDP (is unique over all IdPs)
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [IdentityProviderListResponse]
    def get_identity_providers(opts = {})
      data, _status_code, _headers = get_identity_providers_with_http_info(opts)
      data
    end

    # getIdentityProviders
    # Retrieves all identity providers. Restricted to LeanIX internal use only.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q A part of the name or EntityID to search for
    # @option opts [String] :entity_id EntityID of the IDP (is unique over all IdPs)
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [Array<(IdentityProviderListResponse, Integer, Hash)>] IdentityProviderListResponse data, response status code and response headers
    def get_identity_providers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.get_identity_providers ...'
      end
      # resource path
      local_var_path = '/identityProviders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'entityID'] = opts[:'entity_id'] if !opts[:'entity_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IdentityProviderListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"IdentityProvidersApi.get_identity_providers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#get_identity_providers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getInstances
    # Retrieves all instances for an identity provider. Restricted to LeanIX internal use only.
    # @param id [String] Identity provider UUID
    # @param [Hash] opts the optional parameters
    # @return [InstanceListResponse]
    def get_instances(id, opts = {})
      data, _status_code, _headers = get_instances_with_http_info(id, opts)
      data
    end

    # getInstances
    # Retrieves all instances for an identity provider. Restricted to LeanIX internal use only.
    # @param id [String] Identity provider UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceListResponse, Integer, Hash)>] InstanceListResponse data, response status code and response headers
    def get_instances_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.get_instances ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IdentityProvidersApi.get_instances"
      end
      # resource path
      local_var_path = '/identityProviders/{id}/instances'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InstanceListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"IdentityProvidersApi.get_instances",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#get_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getMetadata
    # Download metadata of an identity provider
    # @param id [String] Identity provider UUID
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_metadata(id, opts = {})
      data, _status_code, _headers = get_metadata_with_http_info(id, opts)
      data
    end

    # getMetadata
    # Download metadata of an identity provider
    # @param id [String] Identity provider UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_metadata_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.get_metadata ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IdentityProvidersApi.get_metadata"
      end
      # resource path
      local_var_path = '/identityProviders/{id}/metadata.xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"IdentityProvidersApi.get_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#get_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateIdentityProvider
    # Updates an identity provider. Restricted to LeanIX internal use only.
    # @param id [String] Identity provider UUID
    # @param body [IdentityProvider] 
    # @param [Hash] opts the optional parameters
    # @return [IdentityProviderResponse]
    def update_identity_provider(id, body, opts = {})
      data, _status_code, _headers = update_identity_provider_with_http_info(id, body, opts)
      data
    end

    # updateIdentityProvider
    # Updates an identity provider. Restricted to LeanIX internal use only.
    # @param id [String] Identity provider UUID
    # @param body [IdentityProvider] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityProviderResponse, Integer, Hash)>] IdentityProviderResponse data, response status code and response headers
    def update_identity_provider_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.update_identity_provider ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IdentityProvidersApi.update_identity_provider"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IdentityProvidersApi.update_identity_provider"
      end
      # resource path
      local_var_path = '/identityProviders/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'IdentityProviderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"IdentityProvidersApi.update_identity_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#update_identity_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
