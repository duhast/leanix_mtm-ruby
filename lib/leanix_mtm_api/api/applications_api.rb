=begin
#MTM

#Multi-tenancy-manager for LeanIX. Manages accounts, contracts, users, workspaces, permissions, and more.

The version of the OpenAPI document: 1.6.348

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module LeanixMtmApi
  class ApplicationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # accessFeature
    # Checks the use permission of a feature
    # @param name [String] 
    # @param id [String] 
    # @param feature_id [String] 
    # @param body [FeatureAccessRequest] 
    # @param [Hash] opts the optional parameters
    # @return [FeatureAccessResponse]
    def access_feature(name, id, feature_id, body, opts = {})
      data, _status_code, _headers = access_feature_with_http_info(name, id, feature_id, body, opts)
      data
    end

    # accessFeature
    # Checks the use permission of a feature
    # @param name [String] 
    # @param id [String] 
    # @param feature_id [String] 
    # @param body [FeatureAccessRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeatureAccessResponse, Integer, Hash)>] FeatureAccessResponse data, response status code and response headers
    def access_feature_with_http_info(name, id, feature_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.access_feature ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationsApi.access_feature"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ApplicationsApi.access_feature"
      end
      # verify the required parameter 'feature_id' is set
      if @api_client.config.client_side_validation && feature_id.nil?
        fail ArgumentError, "Missing the required parameter 'feature_id' when calling ApplicationsApi.access_feature"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ApplicationsApi.access_feature"
      end
      # resource path
      local_var_path = '/applications/{name}/editions/{id}/features/{featureId}'.sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'featureId' + '}', CGI.escape(feature_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FeatureAccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.access_feature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#access_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getApplication
    # Retrieve specific application by name. Restricted to LeanIX internal use only.
    # @param name [String] application name, a const like mtm
    # @param [Hash] opts the optional parameters
    # @return [ApplicationResponse]
    def get_application(name, opts = {})
      data, _status_code, _headers = get_application_with_http_info(name, opts)
      data
    end

    # getApplication
    # Retrieve specific application by name. Restricted to LeanIX internal use only.
    # @param name [String] application name, a const like mtm
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationResponse, Integer, Hash)>] ApplicationResponse data, response status code and response headers
    def get_application_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.get_application ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationsApi.get_application"
      end
      # resource path
      local_var_path = '/applications/{name}'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.get_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#get_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getApplications
    # Retrieves all applications. Restricted to LeanIX internal use only.
    # @param [Hash] opts the optional parameters
    # @return [ApplicationListResponse]
    def get_applications(opts = {})
      data, _status_code, _headers = get_applications_with_http_info(opts)
      data
    end

    # getApplications
    # Retrieves all applications. Restricted to LeanIX internal use only.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationListResponse, Integer, Hash)>] ApplicationListResponse data, response status code and response headers
    def get_applications_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.get_applications ...'
      end
      # resource path
      local_var_path = '/applications'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.get_applications",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#get_applications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getEditions
    # Retrieves an edition
    # @param name [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [FeatureBundleResponse]
    def get_edition(name, id, opts = {})
      data, _status_code, _headers = get_edition_with_http_info(name, id, opts)
      data
    end

    # getEditions
    # Retrieves an edition
    # @param name [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeatureBundleResponse, Integer, Hash)>] FeatureBundleResponse data, response status code and response headers
    def get_edition_with_http_info(name, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.get_edition ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationsApi.get_edition"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ApplicationsApi.get_edition"
      end
      # resource path
      local_var_path = '/applications/{name}/editions/{id}'.sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeatureBundleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.get_edition",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#get_edition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getEditions
    # Retrieves all editions. Restricted to LeanIX internal use only.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :without_legacy_editions 
    # @option opts [String] :q 
    # @return [FeatureBundleListResponse]
    def get_editions(name, opts = {})
      data, _status_code, _headers = get_editions_with_http_info(name, opts)
      data
    end

    # getEditions
    # Retrieves all editions. Restricted to LeanIX internal use only.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :without_legacy_editions 
    # @option opts [String] :q 
    # @return [Array<(FeatureBundleListResponse, Integer, Hash)>] FeatureBundleListResponse data, response status code and response headers
    def get_editions_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.get_editions ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationsApi.get_editions"
      end
      # resource path
      local_var_path = '/applications/{name}/editions'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withoutLegacyEditions'] = opts[:'without_legacy_editions'] if !opts[:'without_legacy_editions'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeatureBundleListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.get_editions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#get_editions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getFeature
    # Retrieves a feature
    # @param name [String] 
    # @param id [String] 
    # @param feature_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [FeatureResponse]
    def get_feature(name, id, feature_id, opts = {})
      data, _status_code, _headers = get_feature_with_http_info(name, id, feature_id, opts)
      data
    end

    # getFeature
    # Retrieves a feature
    # @param name [String] 
    # @param id [String] 
    # @param feature_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeatureResponse, Integer, Hash)>] FeatureResponse data, response status code and response headers
    def get_feature_with_http_info(name, id, feature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.get_feature ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationsApi.get_feature"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ApplicationsApi.get_feature"
      end
      # verify the required parameter 'feature_id' is set
      if @api_client.config.client_side_validation && feature_id.nil?
        fail ArgumentError, "Missing the required parameter 'feature_id' when calling ApplicationsApi.get_feature"
      end
      # resource path
      local_var_path = '/applications/{name}/editions/{id}/features/{featureId}'.sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'featureId' + '}', CGI.escape(feature_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeatureResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.get_feature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#get_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getFeatures
    # Retrieves all possible features
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q 
    # @return [FeatureListResponse]
    def get_features(name, opts = {})
      data, _status_code, _headers = get_features_with_http_info(name, opts)
      data
    end

    # getFeatures
    # Retrieves all possible features
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q 
    # @return [Array<(FeatureListResponse, Integer, Hash)>] FeatureListResponse data, response status code and response headers
    def get_features_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.get_features ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationsApi.get_features"
      end
      # resource path
      local_var_path = '/applications/{name}/features'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeatureListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.get_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#get_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
