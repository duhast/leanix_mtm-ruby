=begin
#MTM

#Multi-tenancy-manager for LeanIX. Manages accounts, contracts, users, workspaces, permissions, and more.

The version of the OpenAPI document: 1.6.348

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module LeanixMtmApi
  class TechnicalusersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # createTechnicalUser
    # Create a technical user
    # @param body [TechnicalUserInputData] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [TechnicalUserResponse]
    def create_technical_user(body, opts = {})
      data, _status_code, _headers = create_technical_user_with_http_info(body, opts)
      data
    end

    # createTechnicalUser
    # Create a technical user
    # @param body [TechnicalUserInputData] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [Array<(TechnicalUserResponse, Integer, Hash)>] TechnicalUserResponse data, response status code and response headers
    def create_technical_user_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TechnicalusersApi.create_technical_user ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TechnicalusersApi.create_technical_user"
      end
      # resource path
      local_var_path = '/technicalusers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TechnicalUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"TechnicalusersApi.create_technical_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TechnicalusersApi#create_technical_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteTechnicalUser
    # Delete a technical user.
    # @param id [String] User UUID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_technical_user(id, opts = {})
      delete_technical_user_with_http_info(id, opts)
      nil
    end

    # deleteTechnicalUser
    # Delete a technical user.
    # @param id [String] User UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_technical_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TechnicalusersApi.delete_technical_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TechnicalusersApi.delete_technical_user"
      end
      # resource path
      local_var_path = '/technicalusers/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"TechnicalusersApi.delete_technical_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TechnicalusersApi#delete_technical_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getEvents
    # Retrieves the technical user events for an user 
    # @param id [String] User UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 100, max 100) (default to 100)
    # @option opts [String] :sort Comma-separated list of sorting (optional) (default to 'createdAt-DESC')
    # @return [EventListResponse]
    def get_events(id, opts = {})
      data, _status_code, _headers = get_events_with_http_info(id, opts)
      data
    end

    # getEvents
    # Retrieves the technical user events for an user 
    # @param id [String] User UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 100, max 100) (default to 100)
    # @option opts [String] :sort Comma-separated list of sorting (optional) (default to 'createdAt-DESC')
    # @return [Array<(EventListResponse, Integer, Hash)>] EventListResponse data, response status code and response headers
    def get_events_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TechnicalusersApi.get_events ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TechnicalusersApi.get_events"
      end
      # resource path
      local_var_path = '/technicalusers/{id}/changelog'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EventListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"TechnicalusersApi.get_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TechnicalusersApi#get_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getTechnicalUser
    # Returns technical user data.
    # @param id [String] TechnicalUser UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id The id of the workspace the technical user belong to only usable for a System User
    # @return [TechnicalUserResponse]
    def get_technical_user(id, opts = {})
      data, _status_code, _headers = get_technical_user_with_http_info(id, opts)
      data
    end

    # getTechnicalUser
    # Returns technical user data.
    # @param id [String] TechnicalUser UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id The id of the workspace the technical user belong to only usable for a System User
    # @return [Array<(TechnicalUserResponse, Integer, Hash)>] TechnicalUserResponse data, response status code and response headers
    def get_technical_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TechnicalusersApi.get_technical_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TechnicalusersApi.get_technical_user"
      end
      # resource path
      local_var_path = '/technicalusers/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TechnicalUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"TechnicalusersApi.get_technical_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TechnicalusersApi#get_technical_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Technical users
    # List or search all technical users.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :query_user_name Search in technical user name (optional)
    # @option opts [String] :sort Comma-separated list of sorting (optional) (default to 'userName-ASC')
    # @option opts [String] :workspace_id The id of the workspace the technical user belong to only usable for a System User
    # @return [TechnicalUserListResponse]
    def get_technical_users(opts = {})
      data, _status_code, _headers = get_technical_users_with_http_info(opts)
      data
    end

    # Technical users
    # List or search all technical users.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :query_user_name Search in technical user name (optional)
    # @option opts [String] :sort Comma-separated list of sorting (optional) (default to 'userName-ASC')
    # @option opts [String] :workspace_id The id of the workspace the technical user belong to only usable for a System User
    # @return [Array<(TechnicalUserListResponse, Integer, Hash)>] TechnicalUserListResponse data, response status code and response headers
    def get_technical_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TechnicalusersApi.get_technical_users ...'
      end
      # resource path
      local_var_path = '/technicalusers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'queryUserName'] = opts[:'query_user_name'] if !opts[:'query_user_name'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TechnicalUserListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"TechnicalusersApi.get_technical_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TechnicalusersApi#get_technical_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # replaceTechnicalUserAPIToken
    # Replace the API Token for a technical user
    # @param id [String] TechnicalUser UUID
    # @param [Hash] opts the optional parameters
    # @return [TechnicalUserResponse]
    def replace_token_for_technical_user(id, opts = {})
      data, _status_code, _headers = replace_token_for_technical_user_with_http_info(id, opts)
      data
    end

    # replaceTechnicalUserAPIToken
    # Replace the API Token for a technical user
    # @param id [String] TechnicalUser UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(TechnicalUserResponse, Integer, Hash)>] TechnicalUserResponse data, response status code and response headers
    def replace_token_for_technical_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TechnicalusersApi.replace_token_for_technical_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TechnicalusersApi.replace_token_for_technical_user"
      end
      # resource path
      local_var_path = '/technicalusers/{id}/replaceToken'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TechnicalUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"TechnicalusersApi.replace_token_for_technical_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TechnicalusersApi#replace_token_for_technical_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateTechnicalUser
    # Update a technical user
    # @param id [String] TechnicalUser UUID
    # @param body [TechnicalUserInputData] 
    # @param [Hash] opts the optional parameters
    # @return [TechnicalUserResponse]
    def update_technical_user(id, body, opts = {})
      data, _status_code, _headers = update_technical_user_with_http_info(id, body, opts)
      data
    end

    # updateTechnicalUser
    # Update a technical user
    # @param id [String] TechnicalUser UUID
    # @param body [TechnicalUserInputData] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TechnicalUserResponse, Integer, Hash)>] TechnicalUserResponse data, response status code and response headers
    def update_technical_user_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TechnicalusersApi.update_technical_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TechnicalusersApi.update_technical_user"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TechnicalusersApi.update_technical_user"
      end
      # resource path
      local_var_path = '/technicalusers/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TechnicalUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"TechnicalusersApi.update_technical_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TechnicalusersApi#update_technical_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
