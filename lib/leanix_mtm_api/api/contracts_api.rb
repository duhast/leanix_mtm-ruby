=begin
#MTM

#Multi-tenancy-manager for LeanIX. Manages accounts, contracts, users, workspaces, permissions, and more.

The version of the OpenAPI document: 1.6.348

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module LeanixMtmApi
  class ContractsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # createContract
    # Add a contract. Restricted to LeanIX internal use only.
    # @param [Hash] opts the optional parameters
    # @option opts [Contract] :body contract data
    # @return [ContractResponse]
    def create_contract(opts = {})
      data, _status_code, _headers = create_contract_with_http_info(opts)
      data
    end

    # createContract
    # Add a contract. Restricted to LeanIX internal use only.
    # @param [Hash] opts the optional parameters
    # @option opts [Contract] :body contract data
    # @return [Array<(ContractResponse, Integer, Hash)>] ContractResponse data, response status code and response headers
    def create_contract_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.create_contract ...'
      end
      # resource path
      local_var_path = '/contracts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ContractResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ContractsApi.create_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#create_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteContract
    # Delete a contract. Restricted to LeanIX internal use only.
    # @param id [String] Contract UUID
    # @param [Hash] opts the optional parameters
    # @return [ContractResponse]
    def delete_contract(id, opts = {})
      data, _status_code, _headers = delete_contract_with_http_info(id, opts)
      data
    end

    # deleteContract
    # Delete a contract. Restricted to LeanIX internal use only.
    # @param id [String] Contract UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContractResponse, Integer, Hash)>] ContractResponse data, response status code and response headers
    def delete_contract_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.delete_contract ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ContractsApi.delete_contract"
      end
      # resource path
      local_var_path = '/contracts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContractResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ContractsApi.delete_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#delete_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getContract
    # Get a contract. Restricted to LeanIX internal use only.
    # @param id [String] Contract UUID
    # @param [Hash] opts the optional parameters
    # @return [ContractResponse]
    def get_contract(id, opts = {})
      data, _status_code, _headers = get_contract_with_http_info(id, opts)
      data
    end

    # getContract
    # Get a contract. Restricted to LeanIX internal use only.
    # @param id [String] Contract UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContractResponse, Integer, Hash)>] ContractResponse data, response status code and response headers
    def get_contract_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.get_contract ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ContractsApi.get_contract"
      end
      # resource path
      local_var_path = '/contracts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContractResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ContractsApi.get_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getContracts
    # Retrieves all contracts. Restricted to LeanIX internal use only.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q Search for account, type or status
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [ContractListResponse]
    def get_contracts(opts = {})
      data, _status_code, _headers = get_contracts_with_http_info(opts)
      data
    end

    # getContracts
    # Retrieves all contracts. Restricted to LeanIX internal use only.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q Search for account, type or status
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [Array<(ContractListResponse, Integer, Hash)>] ContractListResponse data, response status code and response headers
    def get_contracts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.get_contracts ...'
      end
      # resource path
      local_var_path = '/contracts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContractListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ContractsApi.get_contracts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_contracts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCustomFeatures
    # Endpoint to list the contract specific custom features. Restricted to LeanIX internal use only.
    # @param id [String] Contract UUID
    # @param [Hash] opts the optional parameters
    # @return [CustomFeatureListResponse]
    def get_custom_features(id, opts = {})
      data, _status_code, _headers = get_custom_features_with_http_info(id, opts)
      data
    end

    # getCustomFeatures
    # Endpoint to list the contract specific custom features. Restricted to LeanIX internal use only.
    # @param id [String] Contract UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomFeatureListResponse, Integer, Hash)>] CustomFeatureListResponse data, response status code and response headers
    def get_custom_features_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.get_custom_features ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ContractsApi.get_custom_features"
      end
      # resource path
      local_var_path = '/contracts/{id}/customFeatures'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomFeatureListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ContractsApi.get_custom_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_custom_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getEvents
    # Retrieves all events for the contract. Restricted to LeanIX internal use only.
    # @param id [String] Contract UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :since time limit, list only newer events (date must be ISO 8601 formatted)
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 100, max 100) (default to 100)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [EventListResponse]
    def get_events(id, opts = {})
      data, _status_code, _headers = get_events_with_http_info(id, opts)
      data
    end

    # getEvents
    # Retrieves all events for the contract. Restricted to LeanIX internal use only.
    # @param id [String] Contract UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :since time limit, list only newer events (date must be ISO 8601 formatted)
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 100, max 100) (default to 100)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [Array<(EventListResponse, Integer, Hash)>] EventListResponse data, response status code and response headers
    def get_events_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.get_events ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ContractsApi.get_events"
      end
      # resource path
      local_var_path = '/contracts/{id}/events'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EventListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ContractsApi.get_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getSettings
    # Endpoint to list the contract specific settings. Restricted to LeanIX internal use only.
    # @param id [String] Contract UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Setting type
    # @return [SettingListResponse]
    def get_settings(id, opts = {})
      data, _status_code, _headers = get_settings_with_http_info(id, opts)
      data
    end

    # getSettings
    # Endpoint to list the contract specific settings. Restricted to LeanIX internal use only.
    # @param id [String] Contract UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Setting type
    # @return [Array<(SettingListResponse, Integer, Hash)>] SettingListResponse data, response status code and response headers
    def get_settings_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.get_settings ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ContractsApi.get_settings"
      end
      allowable_values = ["CONFIG", "SETUP"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/contracts/{id}/settings'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SettingListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ContractsApi.get_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getWorkspaces
    # Get the workspaces of a contract. Restricted to LeanIX internal use only.
    # @param id [String] Contract UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [WorkspaceListResponse]
    def get_workspaces(id, opts = {})
      data, _status_code, _headers = get_workspaces_with_http_info(id, opts)
      data
    end

    # getWorkspaces
    # Get the workspaces of a contract. Restricted to LeanIX internal use only.
    # @param id [String] Contract UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [Array<(WorkspaceListResponse, Integer, Hash)>] WorkspaceListResponse data, response status code and response headers
    def get_workspaces_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.get_workspaces ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ContractsApi.get_workspaces"
      end
      # resource path
      local_var_path = '/contracts/{id}/workspaces'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkspaceListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ContractsApi.get_workspaces",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_workspaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateContract
    # Update a contract. Restricted to LeanIX internal use only.
    # @param id [String] Contract UUID
    # @param body [Contract] 
    # @param [Hash] opts the optional parameters
    # @return [ContractResponse]
    def update_contract(id, body, opts = {})
      data, _status_code, _headers = update_contract_with_http_info(id, body, opts)
      data
    end

    # updateContract
    # Update a contract. Restricted to LeanIX internal use only.
    # @param id [String] Contract UUID
    # @param body [Contract] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContractResponse, Integer, Hash)>] ContractResponse data, response status code and response headers
    def update_contract_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.update_contract ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ContractsApi.update_contract"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ContractsApi.update_contract"
      end
      # resource path
      local_var_path = '/contracts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ContractResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ContractsApi.update_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#update_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
