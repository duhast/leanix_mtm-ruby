=begin
#MTM

#Multi-tenancy-manager for LeanIX. Manages accounts, contracts, users, workspaces, permissions, and more.

The version of the OpenAPI document: 1.6.348

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module LeanixMtmApi
  class InactiveApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # inactive
    # List inactive users. Restricted to LeanIX internal use only.
    # @param workspace_id [String] The id of the workspace to query for inactive users.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :alpha The alpha value for significance, when classifying users as inactive. (default to 0.01)
    # @option opts [Integer] :min_days_until_absent Minimum amount of days, when a regular user is seen as inactive regardless of usual login behavior. (default to 28)
    # @return [UserListResponse]
    def get_inactive_users(workspace_id, opts = {})
      data, _status_code, _headers = get_inactive_users_with_http_info(workspace_id, opts)
      data
    end

    # inactive
    # List inactive users. Restricted to LeanIX internal use only.
    # @param workspace_id [String] The id of the workspace to query for inactive users.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :alpha The alpha value for significance, when classifying users as inactive. (default to 0.01)
    # @option opts [Integer] :min_days_until_absent Minimum amount of days, when a regular user is seen as inactive regardless of usual login behavior. (default to 28)
    # @return [Array<(UserListResponse, Integer, Hash)>] UserListResponse data, response status code and response headers
    def get_inactive_users_with_http_info(workspace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InactiveApi.get_inactive_users ...'
      end
      # verify the required parameter 'workspace_id' is set
      if @api_client.config.client_side_validation && workspace_id.nil?
        fail ArgumentError, "Missing the required parameter 'workspace_id' when calling InactiveApi.get_inactive_users"
      end
      # resource path
      local_var_path = '/inactive'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = workspace_id
      query_params[:'alpha'] = opts[:'alpha'] if !opts[:'alpha'].nil?
      query_params[:'minDaysUntilAbsent'] = opts[:'min_days_until_absent'] if !opts[:'min_days_until_absent'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"InactiveApi.get_inactive_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InactiveApi#get_inactive_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
