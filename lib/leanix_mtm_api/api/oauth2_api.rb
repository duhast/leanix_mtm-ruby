=begin
#MTM

#Multi-tenancy-manager for LeanIX. Manages accounts, contracts, users, workspaces, permissions, and more.

The version of the OpenAPI document: 1.6.348

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module LeanixMtmApi
  class Oauth2Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # token
    # Creates an access token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [Boolean] :allow_inactive_workspace 
    # @option opts [String] :client_id 
    # @option opts [String] :client_secret 
    # @option opts [String] :code 
    # @option opts [String] :grant_type 
    # @option opts [String] :redirect_uri 
    # @option opts [String] :refresh_token 
    # @option opts [String] :username 
    # @option opts [String] :password 
    # @option opts [String] :scope 
    # @return [AccessTokenResponse]
    def token(opts = {})
      data, _status_code, _headers = token_with_http_info(opts)
      data
    end

    # token
    # Creates an access token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [Boolean] :allow_inactive_workspace 
    # @option opts [String] :client_id 
    # @option opts [String] :client_secret 
    # @option opts [String] :code 
    # @option opts [String] :grant_type 
    # @option opts [String] :redirect_uri 
    # @option opts [String] :refresh_token 
    # @option opts [String] :username 
    # @option opts [String] :password 
    # @option opts [String] :scope 
    # @return [Array<(AccessTokenResponse, Integer, Hash)>] AccessTokenResponse data, response status code and response headers
    def token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Oauth2Api.token ...'
      end
      # resource path
      local_var_path = '/oauth2/token'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'allowInactiveWorkspace'] = opts[:'allow_inactive_workspace'] if !opts[:'allow_inactive_workspace'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['client_id'] = opts[:'client_id'] if !opts[:'client_id'].nil?
      form_params['client_secret'] = opts[:'client_secret'] if !opts[:'client_secret'].nil?
      form_params['code'] = opts[:'code'] if !opts[:'code'].nil?
      form_params['grant_type'] = opts[:'grant_type'] if !opts[:'grant_type'].nil?
      form_params['redirect_uri'] = opts[:'redirect_uri'] if !opts[:'redirect_uri'].nil?
      form_params['refresh_token'] = opts[:'refresh_token'] if !opts[:'refresh_token'].nil?
      form_params['username'] = opts[:'username'] if !opts[:'username'].nil?
      form_params['password'] = opts[:'password'] if !opts[:'password'].nil?
      form_params['scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccessTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"Oauth2Api.token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Oauth2Api#token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param workspace_id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def token_0(workspace_id, opts = {})
      token_0_with_http_info(workspace_id, opts)
      nil
    end

    # @param workspace_id [String] Workspace UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def token_0_with_http_info(workspace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Oauth2Api.token_0 ...'
      end
      # verify the required parameter 'workspace_id' is set
      if @api_client.config.client_side_validation && workspace_id.nil?
        fail ArgumentError, "Missing the required parameter 'workspace_id' when calling Oauth2Api.token_0"
      end
      # resource path
      local_var_path = '/oauth2/token/switchWorkspace/{workspaceId}'.sub('{' + 'workspaceId' + '}', CGI.escape(workspace_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"Oauth2Api.token_0",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Oauth2Api#token_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
