=begin
#MTM

#Multi-tenancy-manager for LeanIX. Manages accounts, contracts, users, workspaces, permissions, and more.

The version of the OpenAPI document: 1.6.348

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module LeanixMtmApi
  class CustomFeaturesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # createCustomFeature
    # Endpoint to set a customFeature. Restricted to LeanIX internal use only.
    # @param body [CustomFeature] 
    # @param [Hash] opts the optional parameters
    # @return [CustomFeatureResponse]
    def create_custom_feature(body, opts = {})
      data, _status_code, _headers = create_custom_feature_with_http_info(body, opts)
      data
    end

    # createCustomFeature
    # Endpoint to set a customFeature. Restricted to LeanIX internal use only.
    # @param body [CustomFeature] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomFeatureResponse, Integer, Hash)>] CustomFeatureResponse data, response status code and response headers
    def create_custom_feature_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFeaturesApi.create_custom_feature ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomFeaturesApi.create_custom_feature"
      end
      # resource path
      local_var_path = '/customFeatures'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomFeatureResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"CustomFeaturesApi.create_custom_feature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFeaturesApi#create_custom_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteCustomFeature
    # Endpoint to delete a custom feature. Restricted to LeanIX internal use only.
    # @param id [String] CustomFeature UUID
    # @param [Hash] opts the optional parameters
    # @return [CustomFeatureResponse]
    def delete_custom_feature(id, opts = {})
      data, _status_code, _headers = delete_custom_feature_with_http_info(id, opts)
      data
    end

    # deleteCustomFeature
    # Endpoint to delete a custom feature. Restricted to LeanIX internal use only.
    # @param id [String] CustomFeature UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomFeatureResponse, Integer, Hash)>] CustomFeatureResponse data, response status code and response headers
    def delete_custom_feature_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFeaturesApi.delete_custom_feature ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CustomFeaturesApi.delete_custom_feature"
      end
      # resource path
      local_var_path = '/customFeatures/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomFeatureResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"CustomFeaturesApi.delete_custom_feature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFeaturesApi#delete_custom_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCustomFeature
    # Endpoint to get a custom feature. Restricted to LeanIX internal use only.
    # @param id [String] CustomFeature UUID
    # @param [Hash] opts the optional parameters
    # @return [CustomFeatureResponse]
    def get_custom_feature(id, opts = {})
      data, _status_code, _headers = get_custom_feature_with_http_info(id, opts)
      data
    end

    # getCustomFeature
    # Endpoint to get a custom feature. Restricted to LeanIX internal use only.
    # @param id [String] CustomFeature UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomFeatureResponse, Integer, Hash)>] CustomFeatureResponse data, response status code and response headers
    def get_custom_feature_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFeaturesApi.get_custom_feature ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CustomFeaturesApi.get_custom_feature"
      end
      # resource path
      local_var_path = '/customFeatures/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomFeatureResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"CustomFeaturesApi.get_custom_feature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFeaturesApi#get_custom_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCustomFeatures
    # Retrieves settings. Restricted to LeanIX internal use only.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :contract_id Contract UUID
    # @option opts [String] :workspace_id Workspace UUID
    # @return [CustomFeatureListResponse]
    def get_custom_features(opts = {})
      data, _status_code, _headers = get_custom_features_with_http_info(opts)
      data
    end

    # getCustomFeatures
    # Retrieves settings. Restricted to LeanIX internal use only.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :contract_id Contract UUID
    # @option opts [String] :workspace_id Workspace UUID
    # @return [Array<(CustomFeatureListResponse, Integer, Hash)>] CustomFeatureListResponse data, response status code and response headers
    def get_custom_features_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFeaturesApi.get_custom_features ...'
      end
      # resource path
      local_var_path = '/customFeatures'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'contractId'] = opts[:'contract_id'] if !opts[:'contract_id'].nil?
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomFeatureListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"CustomFeaturesApi.get_custom_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFeaturesApi#get_custom_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateCustomFeature
    # Endpoint to update a custom feature. Restricted to LeanIX internal use only.
    # @param id [String] CustomFeature UUID
    # @param body [CustomFeature] 
    # @param [Hash] opts the optional parameters
    # @return [CustomFeatureResponse]
    def update_custom_feature(id, body, opts = {})
      data, _status_code, _headers = update_custom_feature_with_http_info(id, body, opts)
      data
    end

    # updateCustomFeature
    # Endpoint to update a custom feature. Restricted to LeanIX internal use only.
    # @param id [String] CustomFeature UUID
    # @param body [CustomFeature] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomFeatureResponse, Integer, Hash)>] CustomFeatureResponse data, response status code and response headers
    def update_custom_feature_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFeaturesApi.update_custom_feature ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CustomFeaturesApi.update_custom_feature"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomFeaturesApi.update_custom_feature"
      end
      # resource path
      local_var_path = '/customFeatures/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomFeatureResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"CustomFeaturesApi.update_custom_feature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFeaturesApi#update_custom_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
