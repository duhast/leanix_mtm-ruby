=begin
#MTM

#Multi-tenancy-manager for LeanIX. Manages accounts, contracts, users, workspaces, permissions, and more.

The version of the OpenAPI document: 1.6.348

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module LeanixMtmApi
  class ExportsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # getExport
    # Retrieves an export
    # @param key [String] Download key
    # @param [Hash] opts the optional parameters
    # @return [WorkspaceResponse]
    def get_export(key, opts = {})
      data, _status_code, _headers = get_export_with_http_info(key, opts)
      data
    end

    # getExport
    # Retrieves an export
    # @param key [String] Download key
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkspaceResponse, Integer, Hash)>] WorkspaceResponse data, response status code and response headers
    def get_export_with_http_info(key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportsApi.get_export ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling ExportsApi.get_export"
      end
      pattern = Regexp.new(/.+/)
      if @api_client.config.client_side_validation && key !~ pattern
        fail ArgumentError, "invalid value for 'key' when calling ExportsApi.get_export, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/exports/{key}'.sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkspaceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ExportsApi.get_export",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportsApi#get_export\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
