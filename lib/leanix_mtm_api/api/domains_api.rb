=begin
#MTM

#Multi-tenancy-manager for LeanIX. Manages accounts, contracts, users, workspaces, permissions, and more.

The version of the OpenAPI document: 1.6.348

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module LeanixMtmApi
  class DomainsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # deleteDomain
    # Deletes a domain and the respective CNAME. Restricted to LeanIX internal use only.
    # @param fqdn [String] Customer fqdn
    # @param [Hash] opts the optional parameters
    # @return [IdentityProviderResponse]
    def delete_domain(fqdn, opts = {})
      data, _status_code, _headers = delete_domain_with_http_info(fqdn, opts)
      data
    end

    # deleteDomain
    # Deletes a domain and the respective CNAME. Restricted to LeanIX internal use only.
    # @param fqdn [String] Customer fqdn
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityProviderResponse, Integer, Hash)>] IdentityProviderResponse data, response status code and response headers
    def delete_domain_with_http_info(fqdn, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.delete_domain ...'
      end
      # verify the required parameter 'fqdn' is set
      if @api_client.config.client_side_validation && fqdn.nil?
        fail ArgumentError, "Missing the required parameter 'fqdn' when calling DomainsApi.delete_domain"
      end
      # resource path
      local_var_path = '/domains/{fqdn}'.sub('{' + 'fqdn' + '}', CGI.escape(fqdn.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IdentityProviderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"DomainsApi.delete_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#delete_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getDomain
    # Retrieves a specific domain. Restricted to LeanIX internal use only.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_domain(id, opts = {})
      get_domain_with_http_info(id, opts)
      nil
    end

    # getDomain
    # Retrieves a specific domain. Restricted to LeanIX internal use only.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_domain_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.get_domain ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DomainsApi.get_domain"
      end
      # resource path
      local_var_path = '/domains/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"DomainsApi.get_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#get_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getDomains
    # Retrieves all domains. Restricted to LeanIX internal use only.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q A part of the FQDN to search for
    # @option opts [String] :fqdn FQDN of the IDP (is unique over all domains)
    # @option opts [String] :instance Current workspace&#39;s instance ID
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [DomainListResponse]
    def get_domains(opts = {})
      data, _status_code, _headers = get_domains_with_http_info(opts)
      data
    end

    # getDomains
    # Retrieves all domains. Restricted to LeanIX internal use only.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q A part of the FQDN to search for
    # @option opts [String] :fqdn FQDN of the IDP (is unique over all domains)
    # @option opts [String] :instance Current workspace&#39;s instance ID
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @return [Array<(DomainListResponse, Integer, Hash)>] DomainListResponse data, response status code and response headers
    def get_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.get_domains ...'
      end
      # resource path
      local_var_path = '/domains'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'FQDN'] = opts[:'fqdn'] if !opts[:'fqdn'].nil?
      query_params[:'instance'] = opts[:'instance'] if !opts[:'instance'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"DomainsApi.get_domains",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#get_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getWorkspaces
    # Retrieves all workspaces for a domain. Restricted to LeanIX internal use only.
    # @param id [String] Domain UUID
    # @param [Hash] opts the optional parameters
    # @return [WorkspaceListResponse]
    def get_workspaces(id, opts = {})
      data, _status_code, _headers = get_workspaces_with_http_info(id, opts)
      data
    end

    # getWorkspaces
    # Retrieves all workspaces for a domain. Restricted to LeanIX internal use only.
    # @param id [String] Domain UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkspaceListResponse, Integer, Hash)>] WorkspaceListResponse data, response status code and response headers
    def get_workspaces_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.get_workspaces ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DomainsApi.get_workspaces"
      end
      # resource path
      local_var_path = '/domains/{id}/workspaces'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkspaceListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"DomainsApi.get_workspaces",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#get_workspaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # upsertDomain
    # Creates or updates a domain and the respective CNAME. Restricted to LeanIX internal use only.
    # @param body [DomainDTO] 
    # @param [Hash] opts the optional parameters
    # @return [DomainResponse]
    def upsert_domain(body, opts = {})
      data, _status_code, _headers = upsert_domain_with_http_info(body, opts)
      data
    end

    # upsertDomain
    # Creates or updates a domain and the respective CNAME. Restricted to LeanIX internal use only.
    # @param body [DomainDTO] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainResponse, Integer, Hash)>] DomainResponse data, response status code and response headers
    def upsert_domain_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.upsert_domain ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DomainsApi.upsert_domain"
      end
      # resource path
      local_var_path = '/domains'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"DomainsApi.upsert_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#upsert_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
