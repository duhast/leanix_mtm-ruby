=begin
#MTM

#Multi-tenancy-manager for LeanIX. Manages accounts, contracts, users, workspaces, permissions, and more.

The version of the OpenAPI document: 1.6.348

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module LeanixMtmApi
  class ApiTokensApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # createApiToken
    # Creates a personal API Token. Personal API Tokens are deprecated. Please use the 'Technical User' functionality to create an API Token.
    # @param api_token [ApiToken] 
    # @param [Hash] opts the optional parameters
    # @return [ApiTokenResponse]
    def create_api_token(api_token, opts = {})
      data, _status_code, _headers = create_api_token_with_http_info(api_token, opts)
      data
    end

    # createApiToken
    # Creates a personal API Token. Personal API Tokens are deprecated. Please use the &#39;Technical User&#39; functionality to create an API Token.
    # @param api_token [ApiToken] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiTokenResponse, Integer, Hash)>] ApiTokenResponse data, response status code and response headers
    def create_api_token_with_http_info(api_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiTokensApi.create_api_token ...'
      end
      # verify the required parameter 'api_token' is set
      if @api_client.config.client_side_validation && api_token.nil?
        fail ArgumentError, "Missing the required parameter 'api_token' when calling ApiTokensApi.create_api_token"
      end
      # resource path
      local_var_path = '/apiTokens'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(api_token)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ApiTokensApi.create_api_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiTokensApi#create_api_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteApiToken
    # Deletes a personal API Token. Personal API Tokens are deprecated. Please use the 'Technical User' functionality to create an API Token.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_api_token(id, opts = {})
      delete_api_token_with_http_info(id, opts)
      nil
    end

    # deleteApiToken
    # Deletes a personal API Token. Personal API Tokens are deprecated. Please use the &#39;Technical User&#39; functionality to create an API Token.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_api_token_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiTokensApi.delete_api_token ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ApiTokensApi.delete_api_token"
      end
      # resource path
      local_var_path = '/apiTokens/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ApiTokensApi.delete_api_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiTokensApi#delete_api_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getApiToken
    # Retrieves a personal API Token. Personal API Tokens are deprecated. Please use the 'Technical User' functionality to create an API Token.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApiTokenResponse]
    def get_api_token(id, opts = {})
      data, _status_code, _headers = get_api_token_with_http_info(id, opts)
      data
    end

    # getApiToken
    # Retrieves a personal API Token. Personal API Tokens are deprecated. Please use the &#39;Technical User&#39; functionality to create an API Token.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiTokenResponse, Integer, Hash)>] ApiTokenResponse data, response status code and response headers
    def get_api_token_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiTokensApi.get_api_token ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ApiTokensApi.get_api_token"
      end
      # resource path
      local_var_path = '/apiTokens/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ApiTokensApi.get_api_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiTokensApi#get_api_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getApiTokens
    # Retrieves all matching personal API Tokens.  Personal API Tokens are deprecated. Please use the 'Technical User' functionality to create an API Token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @option opts [String] :identifier Filter by identifier (optional)
    # @option opts [String] :user_id Find tokens belonging to this user id. (optional, only allowed for SYSTEM user)
    # @option opts [String] :workspace_id Find tokens belonging to this workspace id. (optional)
    # @return [ApiTokenListResponse]
    def get_api_tokens(opts = {})
      data, _status_code, _headers = get_api_tokens_with_http_info(opts)
      data
    end

    # getApiTokens
    # Retrieves all matching personal API Tokens.  Personal API Tokens are deprecated. Please use the &#39;Technical User&#39; functionality to create an API Token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 30, max 100) (default to 30)
    # @option opts [String] :sort Comma-separated list of sorting (optional)
    # @option opts [String] :identifier Filter by identifier (optional)
    # @option opts [String] :user_id Find tokens belonging to this user id. (optional, only allowed for SYSTEM user)
    # @option opts [String] :workspace_id Find tokens belonging to this workspace id. (optional)
    # @return [Array<(ApiTokenListResponse, Integer, Hash)>] ApiTokenListResponse data, response status code and response headers
    def get_api_tokens_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiTokensApi.get_api_tokens ...'
      end
      # resource path
      local_var_path = '/apiTokens'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'identifier'] = opts[:'identifier'] if !opts[:'identifier'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiTokenListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ApiTokensApi.get_api_tokens",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiTokensApi#get_api_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateApiToken
    # Updates a personal API Token. Personal API Tokens are deprecated. Please use the 'Technical User' functionality to create an API Token.
    # @param id [String] 
    # @param token_data [ApiToken] 
    # @param [Hash] opts the optional parameters
    # @return [ApiTokenResponse]
    def update_api_token(id, token_data, opts = {})
      data, _status_code, _headers = update_api_token_with_http_info(id, token_data, opts)
      data
    end

    # updateApiToken
    # Updates a personal API Token. Personal API Tokens are deprecated. Please use the &#39;Technical User&#39; functionality to create an API Token.
    # @param id [String] 
    # @param token_data [ApiToken] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiTokenResponse, Integer, Hash)>] ApiTokenResponse data, response status code and response headers
    def update_api_token_with_http_info(id, token_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiTokensApi.update_api_token ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ApiTokensApi.update_api_token"
      end
      # verify the required parameter 'token_data' is set
      if @api_client.config.client_side_validation && token_data.nil?
        fail ArgumentError, "Missing the required parameter 'token_data' when calling ApiTokensApi.update_api_token"
      end
      # resource path
      local_var_path = '/apiTokens/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(token_data)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ApiTokensApi.update_api_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiTokensApi#update_api_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
